/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/authors": {
    get: operations["getAuthors"];
    post: operations["createAuthor"];
  };
  "/authors/{id}": {
    get: operations["getAuthor"];
  };
  "/authors/{id}/posts": {
    get: operations["getAuthorPosts"];
  };
  "/auth/login": {
    post: operations["login"];
  };
  "/auth/me": {
    get: operations["getMe"];
  };
  "/auth/me/posts": {
    get: operations["getMyPosts"];
  };
  "/posts/timeline": {
    get: operations["getTimeline"];
  };
  "/posts/{id}": {
    get: operations["getPost"];
    delete: operations["deletePost"];
  };
  "/posts/{id}/replies": {
    get: operations["getPostReplies"];
    post: operations["createReply"];
  };
  "/posts/{id}/reactions": {
    get: operations["getPostReactions"];
    put: operations["updateReaction"];
    post: operations["createReaction"];
  };
  "/posts/{id}/author": {
    get: operations["getPostAuthor"];
  };
  "/posts": {
    post: operations["createPost"];
  };
  "/posts/{id}/reposts": {
    post: operations["createRepost"];
  };
}

export interface components {
  schemas: {
    Author: {
      id: number;
      username: string | null;
    };
    AuthorsEdge: {
      node: components["schemas"]["Author"];
      cursor: string;
    };
    PageInfo: {
      hasPreviousPage: boolean;
      hasNextPage: boolean;
      endCursor: string | null;
    };
    AuthorsPage: {
      totalCount: number;
      edges: components["schemas"]["AuthorsEdge"][];
      pageInfo: components["schemas"]["PageInfo"];
    };
    Post: {
      id: number;
      text: string;
      relyId: number | null;
      repostId: number | null;
      timestamp: number;
    };
    PostsEdge: {
      node: components["schemas"]["Post"];
      cursor: string;
    };
    PostsPage: {
      totalCount: number;
      edges: components["schemas"]["PostsEdge"][];
      pageInfo: components["schemas"]["PageInfo"];
    };
    NewAuthor: {
      username: string;
      password: string;
    };
    LoginInput: {
      username: string;
      password: string;
    };
    Me: {
      id: number;
      username: string | null;
      sessionId: string;
      sessionStartTime: number;
    };
    NewPost: {
      text: string;
    };
    ReactionInput: {
      /** @enum {string} */
      reaction:
        | "LIKE"
        | "DISLIKE"
        | "LOVE"
        | "CELEBRATE"
        | "ANGRY"
        | "SAD"
        | "WOW"
        | "LOL";
    };
  };
}

export interface operations {
  getAuthors: {
    parameters: {
      query: {
        first: number;
        after: string;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["AuthorsPage"];
        };
      };
    };
  };
  createAuthor: {
    parameters: {};
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["Author"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewAuthor"];
      };
    };
  };
  getAuthor: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["Author"];
        };
      };
    };
  };
  getAuthorPosts: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        first: number;
        after: string;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["PostsPage"];
        };
      };
    };
  };
  login: {
    parameters: {};
    responses: {
      default: {
        content: {
          "application/json": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginInput"];
      };
    };
  };
  getMe: {
    parameters: {};
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["Me"];
        };
      };
    };
  };
  getMyPosts: {
    parameters: {
      query: {
        first: number;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["PostsPage"];
        };
      };
    };
  };
  getTimeline: {
    parameters: {
      query: {
        first: number;
        after: string;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["PostsPage"];
        };
      };
    };
  };
  getPost: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["Post"];
        };
      };
    };
  };
  deletePost: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  getPostReplies: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        first: number;
        after: string;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["PostsPage"];
        };
      };
    };
  };
  createReply: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["Post"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewPost"];
      };
    };
  };
  getPostReactions: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        first: number;
        after: string;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  updateReaction: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": number;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReactionInput"];
      };
    };
  };
  createReaction: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": number;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReactionInput"];
      };
    };
  };
  getPostAuthor: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["Author"];
        };
      };
    };
  };
  createPost: {
    parameters: {};
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["Post"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewPost"];
      };
    };
  };
  createRepost: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      default: {
        content: {
          "application/json": components["schemas"]["Post"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewPost"];
      };
    };
  };
}

export interface external {}
